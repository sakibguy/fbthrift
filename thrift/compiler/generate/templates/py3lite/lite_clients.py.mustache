{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!
Generated Python classes for Thrift clients
}}
{{> common/AutoGeneratedPy}}

from {{program:base_library_package}}.sync_client import SyncClient as _fbthrift_py3lite_SyncClient
from {{program:base_library_package}}.async_client import AsyncClient as _fbthrift_py3lite_AsyncClient
import {{program:base_library_package}}.exceptions as _fbthrift_py3lite_exceptions
import {{#program:py3_namespaces}}{{value}}.{{/program:py3_namespaces}}{{program:name}}.lite_types as _{{#program:py3_namespaces}}{{value}}_{{/program:py3_namespaces}}{{program:name}}_lite_types


{{#program:services?}}
{{#program:services}}
class {{service:name}}:
    class Sync(_fbthrift_py3lite_SyncClient):
        def __init__(self, channel):
            super().__init__(channel, "{{service:name}}")
        {{#service:supported_functions}}

        def {{function:name}}(
            self{{#function:args}},
            {{field:py_name}}{{/function:args}}
        ):
            resp = self._send_request(
                "{{function:name}}",
                _{{#program:py3_namespaces}}{{value}}_{{/program:py3_namespaces}}{{program:name}}_lite_types.{{> types/function_args_struct_name}}({{#function:args}}
                    {{field:py_name}}={{field:py_name}},{{/function:args}}),
                {{#function:oneway?}}None{{/function:oneway?}}{{!!
                }}{{^function:oneway?}}{{!!
                }}_{{#program:py3_namespaces}}{{value}}_{{/program:py3_namespaces}}{{program:name}}_lite_types.{{> types/function_return_struct_name}}{{!!
                }}{{/function:oneway?}},
            )
            {{#function:return_type}}{{^type:void?}}
            # shortcut to success path for non-void returns
            if resp.success is not None:
                return resp.success
            {{/type:void?}}{{/function:return_type}}
            {{#function:exceptions}}
            if resp.{{field:py_name}} is not None:
                raise resp.{{field:py_name}}
            {{/function:exceptions}}
            {{#function:return_type}}{{^type:void?}}
            raise _fbthrift_py3lite_exceptions.ApplicationError(
                _fbthrift_py3lite_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
            {{/type:void?}}{{/function:return_type}}
        {{/service:supported_functions}}

    class Async(_fbthrift_py3lite_AsyncClient):
        def __init__(self):
            super().__init__("{{service:name}}")
        {{#service:supported_functions}}

        async def {{function:name}}(
            self{{#function:args}},
            {{field:py_name}}{{/function:args}}
        ):
            resp = await self._send_request(
                "{{function:name}}",
                _{{#program:py3_namespaces}}{{value}}_{{/program:py3_namespaces}}{{program:name}}_lite_types.{{> types/function_args_struct_name}}({{#function:args}}
                    {{field:py_name}}={{field:py_name}},{{/function:args}}),
                {{#function:oneway?}}None{{/function:oneway?}}{{!!
                }}{{^function:oneway?}}{{!!
                }}_{{#program:py3_namespaces}}{{value}}_{{/program:py3_namespaces}}{{program:name}}_lite_types.{{> types/function_return_struct_name}}{{!!
                }}{{/function:oneway?}},
            )
            {{#function:return_type}}{{^type:void?}}
            # shortcut to success path for non-void returns
            if resp.success is not None:
                return resp.success
            {{/type:void?}}{{/function:return_type}}
            {{#function:exceptions}}
            if resp.{{field:py_name}} is not None:
                raise resp.{{field:py_name}}
            {{/function:exceptions}}
            {{#function:return_type}}{{^type:void?}}
            raise _fbthrift_py3lite_exceptions.ApplicationError(
                _fbthrift_py3lite_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
            {{/type:void?}}{{/function:return_type}}
        {{/service:supported_functions}}


{{/program:services}}
{{/program:services?}}
