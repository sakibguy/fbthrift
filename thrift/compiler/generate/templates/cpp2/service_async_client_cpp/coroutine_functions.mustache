<%!

  Copyright 2019 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%>
#if FOLLY_HAS_COROUTINES
<%#function:returns_sink?%>
folly::coro::Task<<% > types/semi_type%>> <% > service_common/client_class_name%>::co_<%function:cpp_name%>(<% > service_common/function_param_list_const%>) {
  ::apache::thrift::RpcOptions rpcOptions;
  co_return co_await co_<%function:cpp_name%>(rpcOptions<%function:comma%><% > service_common/param_list%>);
}
folly::coro::Task<<% > types/semi_type%>> <% > service_common/client_class_name%>::co_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
  const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
  const bool cancellable = cancelToken.canBeCancelled();
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto [ctx, header] = <%function:cpp_name%>Ctx(&rpcOptions);
  using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
  auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
  auto wrappedCallback = apache::thrift::createSinkClientCallback(
    apache::thrift::RequestClientCallback::Ptr(apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback)));

  <%function:cpp_name%>Impl(rpcOptions, std::move(header), ctx.get(), wrappedCallback<%function:comma%><% > service_common/param_list%>);

  if (cancellable) {
    folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
    co_await callback.co_waitUntilDone();
  } else {
    co_await callback.co_waitUntilDone();
  }
  if (returnState.isException()) {
    co_yield folly::coro::co_error(std::move(returnState.exception()));
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::move(ctx));
  co_return recv_<%function:cpp_name%>(returnState);
}
<%/function:returns_sink?%><%!
Other coroutine functions are inline templates to prevent binary size regression
%>
#endif // FOLLY_HAS_COROUTINES
