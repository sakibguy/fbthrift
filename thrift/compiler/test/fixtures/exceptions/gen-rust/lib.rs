// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

#![recursion_limit = "100000000"]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies)]

pub use self::errors::*;
pub use self::types::*;

/// Thrift type definitions for `module`.
pub mod types {
    #![allow(clippy::redundant_closure)]


    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Fiery {
        pub message: ::std::string::String,
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for Fiery {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for Fiery {}

    impl ::std::fmt::Display for Fiery {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "Fiery: {}: {:?}", self.message, self)
        }
    }

    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Serious {
        pub sonnet: ::std::option::Option<::std::string::String>,
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for Serious {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for Serious {}

    impl ::std::fmt::Display for Serious {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "Serious: {:?}: {:?}", self.sonnet, self)
        }
    }

    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ComplexFieldNames {
        pub error_message: ::std::string::String,
        pub internal_error_message: ::std::string::String,
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for ComplexFieldNames {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for ComplexFieldNames {}

    impl ::std::fmt::Display for ComplexFieldNames {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "ComplexFieldNames: {}: {:?}", self.internal_error_message, self)
        }
    }

    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct CustomFieldNames {
        pub error_message: ::std::string::String,
        pub internal_error_message: ::std::string::String,
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for CustomFieldNames {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for CustomFieldNames {}

    impl ::std::fmt::Display for CustomFieldNames {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "CustomFieldNames: {}: {:?}", self.internal_error_message, self)
        }
    }

    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ExceptionWithPrimitiveField {
        pub message: ::std::string::String,
        pub error_code: ::std::primitive::i32,
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for ExceptionWithPrimitiveField {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for ExceptionWithPrimitiveField {}

    impl ::std::fmt::Display for ExceptionWithPrimitiveField {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "ExceptionWithPrimitiveField: {}: {:?}", self.message, self)
        }
    }

    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Banal {
        // This field forces `..Default::default()` when instantiating this
        // struct, to make code future-proof against new fields added later to
        // the definition in Thrift. If you don't want this, add the annotation
        // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
        #[doc(hidden)]
        pub _dot_dot_Default_default: self::dot_dot::OtherFields,
    }

    impl ::fbthrift::ExceptionInfo for Banal {
        fn exn_value(&self) -> String {
            format!("{:?}", self)
        }

        #[inline]
        fn exn_is_declared(&self) -> bool { true }
    }

    impl ::std::error::Error for Banal {}

    impl ::std::fmt::Display for Banal {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "{:?}", self)
        }
    }

    impl ::std::default::Default for self::Fiery {
        fn default() -> Self {
            Self {
                message: ::std::default::Default::default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::Fiery {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("Fiery")
                .field("message", &self.message)
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::Fiery {}
    unsafe impl ::std::marker::Sync for self::Fiery {}

    impl ::fbthrift::GetTType for self::Fiery {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::Fiery
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Fiery");
            p.write_field_begin("message", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::Fiery
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("message", ::fbthrift::TType::String, 1),
            ];
            let mut field_message = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                message: field_message.unwrap_or_default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    impl ::std::default::Default for self::Serious {
        fn default() -> Self {
            Self {
                sonnet: ::std::option::Option::None,
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::Serious {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("Serious")
                .field("sonnet", &self.sonnet)
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::Serious {}
    unsafe impl ::std::marker::Sync for self::Serious {}

    impl ::fbthrift::GetTType for self::Serious {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::Serious
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Serious");
            if let ::std::option::Option::Some(some) = &self.sonnet {
                p.write_field_begin("sonnet", ::fbthrift::TType::String, 1);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::Serious
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("sonnet", ::fbthrift::TType::String, 1),
            ];
            let mut field_sonnet = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_sonnet = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                sonnet: field_sonnet,
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    impl ::std::default::Default for self::ComplexFieldNames {
        fn default() -> Self {
            Self {
                error_message: ::std::default::Default::default(),
                internal_error_message: ::std::default::Default::default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::ComplexFieldNames {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("ComplexFieldNames")
                .field("error_message", &self.error_message)
                .field("internal_error_message", &self.internal_error_message)
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::ComplexFieldNames {}
    unsafe impl ::std::marker::Sync for self::ComplexFieldNames {}

    impl ::fbthrift::GetTType for self::ComplexFieldNames {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ComplexFieldNames
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexFieldNames");
            p.write_field_begin("error_message", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.error_message, p);
            p.write_field_end();
            p.write_field_begin("internal_error_message", ::fbthrift::TType::String, 2);
            ::fbthrift::Serialize::write(&self.internal_error_message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ComplexFieldNames
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("error_message", ::fbthrift::TType::String, 1),
                ::fbthrift::Field::new("internal_error_message", ::fbthrift::TType::String, 2),
            ];
            let mut field_error_message = ::std::option::Option::None;
            let mut field_internal_error_message = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_error_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 2) => field_internal_error_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                error_message: field_error_message.unwrap_or_default(),
                internal_error_message: field_internal_error_message.unwrap_or_default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    impl ::std::default::Default for self::CustomFieldNames {
        fn default() -> Self {
            Self {
                error_message: ::std::default::Default::default(),
                internal_error_message: ::std::default::Default::default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::CustomFieldNames {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("CustomFieldNames")
                .field("error_message", &self.error_message)
                .field("internal_error_message", &self.internal_error_message)
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::CustomFieldNames {}
    unsafe impl ::std::marker::Sync for self::CustomFieldNames {}

    impl ::fbthrift::GetTType for self::CustomFieldNames {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::CustomFieldNames
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("CustomFieldNames");
            p.write_field_begin("error_message", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.error_message, p);
            p.write_field_end();
            p.write_field_begin("internal_error_message", ::fbthrift::TType::String, 2);
            ::fbthrift::Serialize::write(&self.internal_error_message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::CustomFieldNames
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("error_message", ::fbthrift::TType::String, 1),
                ::fbthrift::Field::new("internal_error_message", ::fbthrift::TType::String, 2),
            ];
            let mut field_error_message = ::std::option::Option::None;
            let mut field_internal_error_message = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_error_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 2) => field_internal_error_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                error_message: field_error_message.unwrap_or_default(),
                internal_error_message: field_internal_error_message.unwrap_or_default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    impl ::std::default::Default for self::ExceptionWithPrimitiveField {
        fn default() -> Self {
            Self {
                message: ::std::default::Default::default(),
                error_code: ::std::default::Default::default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::ExceptionWithPrimitiveField {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("ExceptionWithPrimitiveField")
                .field("message", &self.message)
                .field("error_code", &self.error_code)
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::ExceptionWithPrimitiveField {}
    unsafe impl ::std::marker::Sync for self::ExceptionWithPrimitiveField {}

    impl ::fbthrift::GetTType for self::ExceptionWithPrimitiveField {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ExceptionWithPrimitiveField
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ExceptionWithPrimitiveField");
            p.write_field_begin("message", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.message, p);
            p.write_field_end();
            p.write_field_begin("error_code", ::fbthrift::TType::I32, 2);
            ::fbthrift::Serialize::write(&self.error_code, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ExceptionWithPrimitiveField
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("error_code", ::fbthrift::TType::I32, 2),
                ::fbthrift::Field::new("message", ::fbthrift::TType::String, 1),
            ];
            let mut field_message = ::std::option::Option::None;
            let mut field_error_code = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 2) => field_error_code = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                message: field_message.unwrap_or_default(),
                error_code: field_error_code.unwrap_or_default(),
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    impl ::std::default::Default for self::Banal {
        fn default() -> Self {
            Self {
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            }
        }
    }

    impl ::std::fmt::Debug for self::Banal {
        fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            formatter
                .debug_struct("Banal")
                .finish()
        }
    }

    unsafe impl ::std::marker::Send for self::Banal {}
    unsafe impl ::std::marker::Sync for self::Banal {}

    impl ::fbthrift::GetTType for self::Banal {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::Banal
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Banal");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::Banal
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                _dot_dot_Default_default: self::dot_dot::OtherFields(()),
            })
        }
    }


    mod dot_dot {
        #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
        pub struct OtherFields(pub(crate) ());
    }
}

#[doc(hidden)]
pub mod dependencies {
}

pub mod services {
    pub mod raiser {

        #[derive(Clone, Debug)]
        pub enum DoBlandExn {
            Success(()),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for DoBlandExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                DoBlandExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::ExceptionInfo for DoBlandExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    DoBlandExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    DoBlandExn::ApplicationException(aexn) => aexn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    DoBlandExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    DoBlandExn::ApplicationException(aexn) => aexn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    DoBlandExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    DoBlandExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for DoBlandExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    DoBlandExn::Success(_) => ::fbthrift::ResultType::Return,
                    DoBlandExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                }
            }
        }

        impl ::fbthrift::GetTType for DoBlandExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for DoBlandExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                if let DoBlandExn::ApplicationException(aexn) = self {
                    return aexn.write(p);
                }
                p.write_struct_begin("DoBland");
                match self {
                    DoBlandExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoBlandExn::ApplicationException(_aexn) => unreachable!(),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for DoBlandExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Void, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = DoBlandExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::Void, 0i32), false) => {
                            once = true;
                            alt = DoBlandExn::Success(::fbthrift::Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoBlandExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                ::std::result::Result::Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum DoRaiseExn {
            Success(()),
            b(crate::types::Banal),
            f(crate::types::Fiery),
            s(crate::types::Serious),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<crate::types::Banal> for DoRaiseExn {
            fn from(exn: crate::types::Banal) -> Self {
                DoRaiseExn::b(exn)
            }
        }

        impl ::std::convert::From<crate::types::Fiery> for DoRaiseExn {
            fn from(exn: crate::types::Fiery) -> Self {
                DoRaiseExn::f(exn)
            }
        }

        impl ::std::convert::From<crate::types::Serious> for DoRaiseExn {
            fn from(exn: crate::types::Serious) -> Self {
                DoRaiseExn::s(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for DoRaiseExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                DoRaiseExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::ExceptionInfo for DoRaiseExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    DoRaiseExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    DoRaiseExn::ApplicationException(aexn) => aexn.exn_name(),
                    DoRaiseExn::b(exn) => exn.exn_name(),
                    DoRaiseExn::f(exn) => exn.exn_name(),
                    DoRaiseExn::s(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    DoRaiseExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    DoRaiseExn::ApplicationException(aexn) => aexn.exn_value(),
                    DoRaiseExn::b(exn) => exn.exn_value(),
                    DoRaiseExn::f(exn) => exn.exn_value(),
                    DoRaiseExn::s(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    DoRaiseExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    DoRaiseExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    DoRaiseExn::b(exn) => exn.exn_is_declared(),
                    DoRaiseExn::f(exn) => exn.exn_is_declared(),
                    DoRaiseExn::s(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for DoRaiseExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    DoRaiseExn::Success(_) => ::fbthrift::ResultType::Return,
                    DoRaiseExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    DoRaiseExn::b(_exn) => fbthrift::ResultType::Error,
                    DoRaiseExn::f(_exn) => fbthrift::ResultType::Error,
                    DoRaiseExn::s(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::fbthrift::GetTType for DoRaiseExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for DoRaiseExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                if let DoRaiseExn::ApplicationException(aexn) = self {
                    return aexn.write(p);
                }
                p.write_struct_begin("DoRaise");
                match self {
                    DoRaiseExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::b(inner) => {
                        p.write_field_begin(
                            "b",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::f(inner) => {
                        p.write_field_begin(
                            "f",
                            ::fbthrift::TType::Struct,
                            2,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::s(inner) => {
                        p.write_field_begin(
                            "s",
                            ::fbthrift::TType::Struct,
                            3,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    DoRaiseExn::ApplicationException(_aexn) => unreachable!(),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for DoRaiseExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Void, 0),
                    ::fbthrift::Field::new("b", ::fbthrift::TType::Struct, 1),
                    ::fbthrift::Field::new("f", ::fbthrift::TType::Struct, 2),
                    ::fbthrift::Field::new("s", ::fbthrift::TType::Struct, 3),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = DoRaiseExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::Void, 0i32), false) => {
                            once = true;
                            alt = DoRaiseExn::Success(::fbthrift::Deserialize::read(p)?);
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = DoRaiseExn::b(::fbthrift::Deserialize::read(p)?);
                        }
                        ((::fbthrift::TType::Struct, 2), false) => {
                            once = true;
                            alt = DoRaiseExn::f(::fbthrift::Deserialize::read(p)?);
                        }
                        ((::fbthrift::TType::Struct, 3), false) => {
                            once = true;
                            alt = DoRaiseExn::s(::fbthrift::Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "DoRaiseExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                ::std::result::Result::Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum Get200Exn {
            Success(::std::string::String),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for Get200Exn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                Get200Exn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::ExceptionInfo for Get200Exn {
            fn exn_name(&self) -> &'static str {
                match self {
                    Get200Exn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    Get200Exn::ApplicationException(aexn) => aexn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    Get200Exn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    Get200Exn::ApplicationException(aexn) => aexn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    Get200Exn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    Get200Exn::ApplicationException(aexn) => aexn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for Get200Exn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    Get200Exn::Success(_) => ::fbthrift::ResultType::Return,
                    Get200Exn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                }
            }
        }

        impl ::fbthrift::GetTType for Get200Exn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for Get200Exn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                if let Get200Exn::ApplicationException(aexn) = self {
                    return aexn.write(p);
                }
                p.write_struct_begin("Get200");
                match self {
                    Get200Exn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get200Exn::ApplicationException(_aexn) => unreachable!(),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for Get200Exn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::String, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::String, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(Get200Exn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "Get200Exn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "Get200Exn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum Get500Exn {
            Success(::std::string::String),
            f(crate::types::Fiery),
            b(crate::types::Banal),
            s(crate::types::Serious),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<crate::types::Fiery> for Get500Exn {
            fn from(exn: crate::types::Fiery) -> Self {
                Get500Exn::f(exn)
            }
        }

        impl ::std::convert::From<crate::types::Banal> for Get500Exn {
            fn from(exn: crate::types::Banal) -> Self {
                Get500Exn::b(exn)
            }
        }

        impl ::std::convert::From<crate::types::Serious> for Get500Exn {
            fn from(exn: crate::types::Serious) -> Self {
                Get500Exn::s(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for Get500Exn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                Get500Exn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::ExceptionInfo for Get500Exn {
            fn exn_name(&self) -> &'static str {
                match self {
                    Get500Exn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    Get500Exn::ApplicationException(aexn) => aexn.exn_name(),
                    Get500Exn::f(exn) => exn.exn_name(),
                    Get500Exn::b(exn) => exn.exn_name(),
                    Get500Exn::s(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    Get500Exn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    Get500Exn::ApplicationException(aexn) => aexn.exn_value(),
                    Get500Exn::f(exn) => exn.exn_value(),
                    Get500Exn::b(exn) => exn.exn_value(),
                    Get500Exn::s(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    Get500Exn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    Get500Exn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    Get500Exn::f(exn) => exn.exn_is_declared(),
                    Get500Exn::b(exn) => exn.exn_is_declared(),
                    Get500Exn::s(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for Get500Exn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    Get500Exn::Success(_) => ::fbthrift::ResultType::Return,
                    Get500Exn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    Get500Exn::f(_exn) => fbthrift::ResultType::Error,
                    Get500Exn::b(_exn) => fbthrift::ResultType::Error,
                    Get500Exn::s(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::fbthrift::GetTType for Get500Exn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for Get500Exn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                if let Get500Exn::ApplicationException(aexn) = self {
                    return aexn.write(p);
                }
                p.write_struct_begin("Get500");
                match self {
                    Get500Exn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::f(inner) => {
                        p.write_field_begin(
                            "f",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::b(inner) => {
                        p.write_field_begin(
                            "b",
                            ::fbthrift::TType::Struct,
                            2,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::s(inner) => {
                        p.write_field_begin(
                            "s",
                            ::fbthrift::TType::Struct,
                            3,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    Get500Exn::ApplicationException(_aexn) => unreachable!(),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for Get500Exn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::String, 0),
                    ::fbthrift::Field::new("b", ::fbthrift::TType::Struct, 2),
                    ::fbthrift::Field::new("f", ::fbthrift::TType::Struct, 1),
                    ::fbthrift::Field::new("s", ::fbthrift::TType::Struct, 3),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::String, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(Get500Exn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(Get500Exn::f(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 2), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(Get500Exn::b(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 3), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(Get500Exn::s(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "Get500Exn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "Get500Exn"),
                    )
                    .into(),
                )
            }
        }
    }
}

/// Client implementation for each service in `module`.
pub mod client {

    pub struct RaiserImpl<P, T, S = ::fbthrift::NoopSpawner> {
        transport: T,
        _phantom: ::std::marker::PhantomData<fn() -> (P, S)>,
    }

    impl<P, T, S> RaiserImpl<P, T, S> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    pub trait Raiser: ::std::marker::Send {
        fn doBland(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoBlandError>> + ::std::marker::Send + 'static>>;
        fn doRaise(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoRaiseError>> + ::std::marker::Send + 'static>>;
        fn get200(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get200Error>> + ::std::marker::Send + 'static>>;
        fn get500(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get500Error>> + ::std::marker::Send + 'static>>;
    }

    struct Args_Raiser_doBland<'a> {
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_Raiser_doBland<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "Raiser.doBland"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_Raiser_doRaise<'a> {
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_Raiser_doRaise<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "Raiser.doRaise"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_Raiser_get200<'a> {
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_Raiser_get200<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "Raiser.get200"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_Raiser_get500<'a> {
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_Raiser_get500<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "Raiser.get500"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P, T, S> Raiser for RaiserImpl<P, T, S>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
        S: ::fbthrift::help::Spawner,
    {
        fn doBland(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoBlandError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.doBland";
            }
            let args = self::Args_Raiser_doBland {
                _phantom: ::std::marker::PhantomData,
            };

            // need to do call setup outside of async block because T: Transport isn't Send
            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("doBland", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call = self.transport()
                .call(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env)
                .instrument(::tracing::trace_span!("call", function = "Raiser.doBland"));

            async move {
                let reply_env = call.await?;

                let de = P::deserializer(reply_env);
                let (res, _de): (::std::result::Result<crate::services::raiser::DoBlandExn, _>, _) =
                    ::fbthrift::help::async_deserialize_response_envelope::<P, _, S>(de).await?;

                match res {
                    ::std::result::Result::Ok(exn) => ::std::convert::From::from(exn),
                    ::std::result::Result::Err(aexn) =>
                        ::std::result::Result::Err(crate::errors::raiser::DoBlandError::ApplicationException(aexn))
                }
            }
            .instrument(::tracing::info_span!("Raiser.doBland"))
            .boxed()
        }


        fn doRaise(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoRaiseError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.doRaise";
            }
            let args = self::Args_Raiser_doRaise {
                _phantom: ::std::marker::PhantomData,
            };

            // need to do call setup outside of async block because T: Transport isn't Send
            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("doRaise", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call = self.transport()
                .call(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env)
                .instrument(::tracing::trace_span!("call", function = "Raiser.doRaise"));

            async move {
                let reply_env = call.await?;

                let de = P::deserializer(reply_env);
                let (res, _de): (::std::result::Result<crate::services::raiser::DoRaiseExn, _>, _) =
                    ::fbthrift::help::async_deserialize_response_envelope::<P, _, S>(de).await?;

                match res {
                    ::std::result::Result::Ok(exn) => ::std::convert::From::from(exn),
                    ::std::result::Result::Err(aexn) =>
                        ::std::result::Result::Err(crate::errors::raiser::DoRaiseError::ApplicationException(aexn))
                }
            }
            .instrument(::tracing::info_span!("Raiser.doRaise"))
            .boxed()
        }


        fn get200(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get200Error>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.get200";
            }
            let args = self::Args_Raiser_get200 {
                _phantom: ::std::marker::PhantomData,
            };

            // need to do call setup outside of async block because T: Transport isn't Send
            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("get200", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call = self.transport()
                .call(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env)
                .instrument(::tracing::trace_span!("call", function = "Raiser.get200"));

            async move {
                let reply_env = call.await?;

                let de = P::deserializer(reply_env);
                let (res, _de): (::std::result::Result<crate::services::raiser::Get200Exn, _>, _) =
                    ::fbthrift::help::async_deserialize_response_envelope::<P, _, S>(de).await?;

                match res {
                    ::std::result::Result::Ok(exn) => ::std::convert::From::from(exn),
                    ::std::result::Result::Err(aexn) =>
                        ::std::result::Result::Err(crate::errors::raiser::Get200Error::ApplicationException(aexn))
                }
            }
            .instrument(::tracing::info_span!("Raiser.get200"))
            .boxed()
        }


        fn get500(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get500Error>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.get500";
            }
            let args = self::Args_Raiser_get500 {
                _phantom: ::std::marker::PhantomData,
            };

            // need to do call setup outside of async block because T: Transport isn't Send
            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("get500", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call = self.transport()
                .call(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env)
                .instrument(::tracing::trace_span!("call", function = "Raiser.get500"));

            async move {
                let reply_env = call.await?;

                let de = P::deserializer(reply_env);
                let (res, _de): (::std::result::Result<crate::services::raiser::Get500Exn, _>, _) =
                    ::fbthrift::help::async_deserialize_response_envelope::<P, _, S>(de).await?;

                match res {
                    ::std::result::Result::Ok(exn) => ::std::convert::From::from(exn),
                    ::std::result::Result::Err(aexn) =>
                        ::std::result::Result::Err(crate::errors::raiser::Get500Error::ApplicationException(aexn))
                }
            }
            .instrument(::tracing::info_span!("Raiser.get500"))
            .boxed()
        }

    }

    impl<'a, T> Raiser for T
    where
        T: ::std::convert::AsRef<dyn Raiser + 'a>,
        T: ::std::marker::Send,
    {
        fn doBland(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoBlandError>> + ::std::marker::Send + 'static>> {
            self.as_ref().doBland(
            )
        }
        fn doRaise(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoRaiseError>> + ::std::marker::Send + 'static>> {
            self.as_ref().doRaise(
            )
        }
        fn get200(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get200Error>> + ::std::marker::Send + 'static>> {
            self.as_ref().get200(
            )
        }
        fn get500(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get500Error>> + ::std::marker::Send + 'static>> {
            self.as_ref().get500(
            )
        }
    }

    #[derive(Clone)]
    pub struct make_Raiser;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// # const _: &str = stringify! {
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = <dyn BuckGraphService>::new(protocol, transport);
    /// # };
    /// ```
    impl dyn Raiser {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> ::std::sync::Arc<impl Raiser + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
        {
            let spawner = ::fbthrift::help::NoopSpawner;
            Self::with_spawner(protocol, transport, spawner)
        }

        pub fn with_spawner<P, T, S>(
            protocol: P,
            transport: T,
            spawner: S,
        ) -> ::std::sync::Arc<impl Raiser + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
            S: ::fbthrift::help::Spawner,
        {
            let _ = protocol;
            let _ = spawner;
            ::std::sync::Arc::new(RaiserImpl::<P, T, S>::new(transport))
        }
    }

    pub type RaiserDynClient = <make_Raiser as ::fbthrift::ClientFactory>::Api;
    pub type RaiserClient = ::std::sync::Arc<RaiserDynClient>;

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ::fbthrift::ClientFactory for make_Raiser {
        type Api = dyn Raiser + ::std::marker::Send + ::std::marker::Sync + 'static;

        fn with_spawner<P, T, S>(protocol: P, transport: T, spawner: S) -> ::std::sync::Arc<Self::Api>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport + ::std::marker::Sync,
            P::Deserializer: ::std::marker::Send,
            S: ::fbthrift::help::Spawner,
        {
            <dyn Raiser>::with_spawner(protocol, transport, spawner)
        }
    }


}

/// Server definitions for `module`.
pub mod server {
    #[::async_trait::async_trait]
    pub trait Raiser: ::std::marker::Send + ::std::marker::Sync + 'static {
        async fn doBland(
            &self,
        ) -> ::std::result::Result<(), crate::services::raiser::DoBlandExn> {
            ::std::result::Result::Err(crate::services::raiser::DoBlandExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "Raiser",
                    "doBland",
                ),
            ))
        }
        async fn doRaise(
            &self,
        ) -> ::std::result::Result<(), crate::services::raiser::DoRaiseExn> {
            ::std::result::Result::Err(crate::services::raiser::DoRaiseExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "Raiser",
                    "doRaise",
                ),
            ))
        }
        async fn get200(
            &self,
        ) -> ::std::result::Result<::std::string::String, crate::services::raiser::Get200Exn> {
            ::std::result::Result::Err(crate::services::raiser::Get200Exn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "Raiser",
                    "get200",
                ),
            ))
        }
        async fn get500(
            &self,
        ) -> ::std::result::Result<::std::string::String, crate::services::raiser::Get500Exn> {
            ::std::result::Result::Err(crate::services::raiser::Get500Exn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "Raiser",
                    "get500",
                ),
            ))
        }
    }

    /// Processor for Raiser's methods.
    #[derive(Clone, Debug)]
    pub struct RaiserProcessor<P, H, R> {
        service: H,
        supa: ::fbthrift::NullServiceProcessor<P, R>,
        _phantom: ::std::marker::PhantomData<(P, H, R)>,
    }

    struct Args_Raiser_doBland {
    }
    impl<P: ::fbthrift::ProtocolReader> ::fbthrift::Deserialize<P> for self::Args_Raiser_doBland {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "deserialize_args", fields(method = "Raiser.doBland"))]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static ARGS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }

    struct Args_Raiser_doRaise {
    }
    impl<P: ::fbthrift::ProtocolReader> ::fbthrift::Deserialize<P> for self::Args_Raiser_doRaise {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "deserialize_args", fields(method = "Raiser.doRaise"))]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static ARGS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }

    struct Args_Raiser_get200 {
    }
    impl<P: ::fbthrift::ProtocolReader> ::fbthrift::Deserialize<P> for self::Args_Raiser_get200 {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "deserialize_args", fields(method = "Raiser.get200"))]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static ARGS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }

    struct Args_Raiser_get500 {
    }
    impl<P: ::fbthrift::ProtocolReader> ::fbthrift::Deserialize<P> for self::Args_Raiser_get500 {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "deserialize_args", fields(method = "Raiser.get500"))]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static ARGS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }


    impl<P, H, R> RaiserProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: Raiser,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Sync,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: ::fbthrift::NullServiceProcessor::new(),
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        #[::tracing::instrument(skip_all, fields(method = "Raiser.doBland"))]
        async fn handle_doBland<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            ctx_stack: &mut R::ContextStack,
        ) -> ::anyhow::Result<crate::services::raiser::DoBlandExn> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.doBland";
            }
            ::fbthrift::ContextStack::pre_read(ctx_stack)?;
            let _args: self::Args_Raiser_doBland = ::fbthrift::Deserialize::read(p)?;
            ::fbthrift::ContextStack::on_read_data(ctx_stack, &::fbthrift::SerializedMessage {
                protocol: P::PROTOCOL_ID,
                method_name: METHOD_NAME.as_cstr(),
                buffer: ::std::marker::PhantomData, // FIXME P::into_buffer(p).reset(),
            })?;
            ::fbthrift::ContextStack::post_read(ctx_stack, 0)?;

            let res = ::std::panic::AssertUnwindSafe(
                self.service.doBland(
                )
            )
            .catch_unwind()
            .instrument(::tracing::info_span!("service_handler", method = "Raiser.doBland"))
            .await;

            // nested results - panic catch on the outside, method on the inside
            let res = match res {
                ::std::result::Result::Ok(::std::result::Result::Ok(res)) => {
                    ::tracing::info!(method = "Raiser.doBland", "success");
                    crate::services::raiser::DoBlandExn::Success(res)
                }
                ::std::result::Result::Ok(::std::result::Result::Err(crate::services::raiser::DoBlandExn::Success(_))) => {
                    panic!(
                        "{} attempted to return success via error",
                        "doBland",
                    )
                }
                ::std::result::Result::Ok(::std::result::Result::Err(exn)) => {
                    ::tracing::error!(method = "Raiser.doBland", exception = ?exn);
                    exn
                }
                ::std::result::Result::Err(exn) => {
                    let aexn = ::fbthrift::ApplicationException::handler_panic("Raiser.doBland", exn);
                    crate::services::raiser::DoBlandExn::ApplicationException(aexn)
                }
            };

            ::std::result::Result::Ok(res)
        }

        #[::tracing::instrument(skip_all, fields(method = "Raiser.doRaise"))]
        async fn handle_doRaise<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            ctx_stack: &mut R::ContextStack,
        ) -> ::anyhow::Result<crate::services::raiser::DoRaiseExn> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.doRaise";
            }
            ::fbthrift::ContextStack::pre_read(ctx_stack)?;
            let _args: self::Args_Raiser_doRaise = ::fbthrift::Deserialize::read(p)?;
            ::fbthrift::ContextStack::on_read_data(ctx_stack, &::fbthrift::SerializedMessage {
                protocol: P::PROTOCOL_ID,
                method_name: METHOD_NAME.as_cstr(),
                buffer: ::std::marker::PhantomData, // FIXME P::into_buffer(p).reset(),
            })?;
            ::fbthrift::ContextStack::post_read(ctx_stack, 0)?;

            let res = ::std::panic::AssertUnwindSafe(
                self.service.doRaise(
                )
            )
            .catch_unwind()
            .instrument(::tracing::info_span!("service_handler", method = "Raiser.doRaise"))
            .await;

            // nested results - panic catch on the outside, method on the inside
            let res = match res {
                ::std::result::Result::Ok(::std::result::Result::Ok(res)) => {
                    ::tracing::info!(method = "Raiser.doRaise", "success");
                    crate::services::raiser::DoRaiseExn::Success(res)
                }
                ::std::result::Result::Ok(::std::result::Result::Err(crate::services::raiser::DoRaiseExn::Success(_))) => {
                    panic!(
                        "{} attempted to return success via error",
                        "doRaise",
                    )
                }
                ::std::result::Result::Ok(::std::result::Result::Err(exn)) => {
                    ::tracing::error!(method = "Raiser.doRaise", exception = ?exn);
                    exn
                }
                ::std::result::Result::Err(exn) => {
                    let aexn = ::fbthrift::ApplicationException::handler_panic("Raiser.doRaise", exn);
                    crate::services::raiser::DoRaiseExn::ApplicationException(aexn)
                }
            };

            ::std::result::Result::Ok(res)
        }

        #[::tracing::instrument(skip_all, fields(method = "Raiser.get200"))]
        async fn handle_get200<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            ctx_stack: &mut R::ContextStack,
        ) -> ::anyhow::Result<crate::services::raiser::Get200Exn> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.get200";
            }
            ::fbthrift::ContextStack::pre_read(ctx_stack)?;
            let _args: self::Args_Raiser_get200 = ::fbthrift::Deserialize::read(p)?;
            ::fbthrift::ContextStack::on_read_data(ctx_stack, &::fbthrift::SerializedMessage {
                protocol: P::PROTOCOL_ID,
                method_name: METHOD_NAME.as_cstr(),
                buffer: ::std::marker::PhantomData, // FIXME P::into_buffer(p).reset(),
            })?;
            ::fbthrift::ContextStack::post_read(ctx_stack, 0)?;

            let res = ::std::panic::AssertUnwindSafe(
                self.service.get200(
                )
            )
            .catch_unwind()
            .instrument(::tracing::info_span!("service_handler", method = "Raiser.get200"))
            .await;

            // nested results - panic catch on the outside, method on the inside
            let res = match res {
                ::std::result::Result::Ok(::std::result::Result::Ok(res)) => {
                    ::tracing::info!(method = "Raiser.get200", "success");
                    crate::services::raiser::Get200Exn::Success(res)
                }
                ::std::result::Result::Ok(::std::result::Result::Err(crate::services::raiser::Get200Exn::Success(_))) => {
                    panic!(
                        "{} attempted to return success via error",
                        "get200",
                    )
                }
                ::std::result::Result::Ok(::std::result::Result::Err(exn)) => {
                    ::tracing::error!(method = "Raiser.get200", exception = ?exn);
                    exn
                }
                ::std::result::Result::Err(exn) => {
                    let aexn = ::fbthrift::ApplicationException::handler_panic("Raiser.get200", exn);
                    crate::services::raiser::Get200Exn::ApplicationException(aexn)
                }
            };

            ::std::result::Result::Ok(res)
        }

        #[::tracing::instrument(skip_all, fields(method = "Raiser.get500"))]
        async fn handle_get500<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            ctx_stack: &mut R::ContextStack,
        ) -> ::anyhow::Result<crate::services::raiser::Get500Exn> {
            use ::const_cstr::const_cstr;
            use ::tracing::Instrument as _;
            use ::futures::FutureExt as _;

            const_cstr! {
                SERVICE_NAME = "Raiser";
                METHOD_NAME = "Raiser.get500";
            }
            ::fbthrift::ContextStack::pre_read(ctx_stack)?;
            let _args: self::Args_Raiser_get500 = ::fbthrift::Deserialize::read(p)?;
            ::fbthrift::ContextStack::on_read_data(ctx_stack, &::fbthrift::SerializedMessage {
                protocol: P::PROTOCOL_ID,
                method_name: METHOD_NAME.as_cstr(),
                buffer: ::std::marker::PhantomData, // FIXME P::into_buffer(p).reset(),
            })?;
            ::fbthrift::ContextStack::post_read(ctx_stack, 0)?;

            let res = ::std::panic::AssertUnwindSafe(
                self.service.get500(
                )
            )
            .catch_unwind()
            .instrument(::tracing::info_span!("service_handler", method = "Raiser.get500"))
            .await;

            // nested results - panic catch on the outside, method on the inside
            let res = match res {
                ::std::result::Result::Ok(::std::result::Result::Ok(res)) => {
                    ::tracing::info!(method = "Raiser.get500", "success");
                    crate::services::raiser::Get500Exn::Success(res)
                }
                ::std::result::Result::Ok(::std::result::Result::Err(crate::services::raiser::Get500Exn::Success(_))) => {
                    panic!(
                        "{} attempted to return success via error",
                        "get500",
                    )
                }
                ::std::result::Result::Ok(::std::result::Result::Err(exn)) => {
                    ::tracing::error!(method = "Raiser.get500", exception = ?exn);
                    exn
                }
                ::std::result::Result::Err(exn) => {
                    let aexn = ::fbthrift::ApplicationException::handler_panic("Raiser.get500", exn);
                    crate::services::raiser::Get500Exn::ApplicationException(aexn)
                }
            };

            ::std::result::Result::Ok(res)
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ServiceProcessor<P> for RaiserProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: Raiser,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[::std::primitive::u8]) -> ::std::result::Result<::std::primitive::usize, ::fbthrift::ApplicationException> {
            match name {
                b"doBland" => ::std::result::Result::Ok(0usize),
                b"doRaise" => ::std::result::Result::Ok(1usize),
                b"get200" => ::std::result::Result::Ok(2usize),
                b"get500" => ::std::result::Result::Ok(3usize),
                _ => ::std::result::Result::Err(::fbthrift::ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: ::std::primitive::usize,
            _p: &mut P::Deserializer,
            _r: &R,
            _seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            match idx {
                0usize => {
                    use const_cstr::const_cstr;
                    const_cstr! {
                        SERVICE_NAME = "Raiser";
                        METHOD_NAME = "Raiser.doBland";
                    }
                    let mut ctx_stack = _r.get_context_stack(
                        SERVICE_NAME.as_cstr(),
                        METHOD_NAME.as_cstr(),
                    )?;
                    let res = self.handle_doBland(_p, _r, &mut ctx_stack).await?;
                    let env = ::fbthrift::help::serialize_result_envelope::<P, R, _>(
                        "doBland",
                        METHOD_NAME.as_cstr(),
                        _seqid,
                        _r,
                        &mut ctx_stack,
                        res
                    )?;
                    Ok(env)
                }
                1usize => {
                    use const_cstr::const_cstr;
                    const_cstr! {
                        SERVICE_NAME = "Raiser";
                        METHOD_NAME = "Raiser.doRaise";
                    }
                    let mut ctx_stack = _r.get_context_stack(
                        SERVICE_NAME.as_cstr(),
                        METHOD_NAME.as_cstr(),
                    )?;
                    let res = self.handle_doRaise(_p, _r, &mut ctx_stack).await?;
                    let env = ::fbthrift::help::serialize_result_envelope::<P, R, _>(
                        "doRaise",
                        METHOD_NAME.as_cstr(),
                        _seqid,
                        _r,
                        &mut ctx_stack,
                        res
                    )?;
                    Ok(env)
                }
                2usize => {
                    use const_cstr::const_cstr;
                    const_cstr! {
                        SERVICE_NAME = "Raiser";
                        METHOD_NAME = "Raiser.get200";
                    }
                    let mut ctx_stack = _r.get_context_stack(
                        SERVICE_NAME.as_cstr(),
                        METHOD_NAME.as_cstr(),
                    )?;
                    let res = self.handle_get200(_p, _r, &mut ctx_stack).await?;
                    let env = ::fbthrift::help::serialize_result_envelope::<P, R, _>(
                        "get200",
                        METHOD_NAME.as_cstr(),
                        _seqid,
                        _r,
                        &mut ctx_stack,
                        res
                    )?;
                    Ok(env)
                }
                3usize => {
                    use const_cstr::const_cstr;
                    const_cstr! {
                        SERVICE_NAME = "Raiser";
                        METHOD_NAME = "Raiser.get500";
                    }
                    let mut ctx_stack = _r.get_context_stack(
                        SERVICE_NAME.as_cstr(),
                        METHOD_NAME.as_cstr(),
                    )?;
                    let res = self.handle_get500(_p, _r, &mut ctx_stack).await?;
                    let env = ::fbthrift::help::serialize_result_envelope::<P, R, _>(
                        "get500",
                        METHOD_NAME.as_cstr(),
                        _seqid,
                        _r,
                        &mut ctx_stack,
                        res
                    )?;
                    Ok(env)
                }
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "RaiserProcessor",
                    bad
                ),
            }
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ThriftService<P::Frame> for RaiserProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        P::Frame: ::std::marker::Send + 'static,
        H: Raiser,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type Handler = H;
        type RequestContext = R;

        #[tracing::instrument(level="trace", skip_all, fields(service = "Raiser"))]
        async fn call(
            &self,
            req: ::fbthrift::ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::fbthrift::{BufExt as _, ProtocolReader as _, ServiceProcessor as _};
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != ::fbthrift::MessageType::Call {
                return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                ::std::result::Result::Ok(idx) => idx,
                ::std::result::Result::Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await?;
            p.read_message_end()?;

            Ok(res)
        }
    }

    /// Construct a new instance of a Raiser service.
    ///
    /// This is called when a new instance of a Thrift service Processor
    /// is needed for a particular Thrift protocol.
    #[::tracing::instrument(level="debug", skip_all, fields(proto = ?proto))]
    pub fn make_Raiser_server<F, H, R>(
        proto: ::fbthrift::ProtocolID,
        handler: H,
    ) -> ::std::result::Result<::std::boxed::Box<dyn ::fbthrift::ThriftService<F, Handler = H, RequestContext = R> + ::std::marker::Send + 'static>, ::fbthrift::ApplicationException>
    where
        F: ::fbthrift::Framing + ::std::marker::Send + ::std::marker::Sync + 'static,
        H: Raiser,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = F::DecBuf> + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        match proto {
            ::fbthrift::ProtocolID::BinaryProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(RaiserProcessor::<::fbthrift::BinaryProtocol<F>, H, R>::new(handler)))
            }
            ::fbthrift::ProtocolID::CompactProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(RaiserProcessor::<::fbthrift::CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => {
                ::tracing::error!(method = "Raiser.", invalid_protocol = ?bad);
                ::std::result::Result::Err(::fbthrift::ApplicationException::invalid_protocol(bad))
            }
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
/// ```thrift
/// service MyService {
///     FunctionResponse myFunction(
///         1: FunctionRequest request,
///     ) throws {
///         1: StorageException s,
///         2: NotFoundException n,
///     ),
///
///     // other functions
/// }
/// ```
///
/// we would end up with this mock object under crate::mock::MyService:
///
/// ```
/// # const _: &str = stringify! {
/// impl crate::client::MyService for MyService<'mock> {...}
///
/// pub struct MyService<'mock> {
///     pub myFunction: myFunction<'mock>,
///     // ...
/// }
///
/// impl dyn crate::client::MyService {
///     pub fn mock<'mock>() -> MyService<'mock>;
/// }
///
/// impl myFunction<'mock> {
///     // directly return the given success response
///     pub fn ret(&self, value: FunctionResponse);
///
///     // invoke closure to compute success response
///     pub fn mock(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///     );
///
///     // invoke closure to compute response
///     pub fn mock_result(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> Result<FunctionResponse, crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock,
///     );
///
///     // return one of the function's declared exceptions
///     pub fn throw<E>(&self, exception: E)
///     where
///         E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
/// }
///
/// impl From<StorageException> for MyFunctionExn {...}
/// impl From<NotFoundException> for MyFunctionExn {...}
/// # };
/// ```
///
/// The intended usage from a test would be:
///
/// ```
/// # const _: &str = stringify! {
/// use std::sync::Arc;
/// use thrift_if::client::MyService;
///
/// #[test]
/// fn test_my_client() {
///     let mock = Arc::new(<dyn MyService>::mock());
///
///     // directly return a success response
///     let resp = FunctionResponse {...};
///     mock.myFunction.ret(resp);
///
///     // or give a closure to compute the success response
///     mock.myFunction.mock(|request| FunctionResponse {...});
///
///     // or throw one of the function's exceptions
///     mock.myFunction.throw(StorageException::ItFailed);
///
///     // or compute a Result (useful if your exceptions aren't Clone)
///     mock.myFunction.mock_result(|request| Err(...));
///
///     let out = do_the_thing(mock).wait().unwrap();
///     assert!(out.what_i_expected());
/// }
///
/// fn do_the_thing(
///     client: Arc<dyn MyService + Send + Sync + 'static>,
/// ) -> impl Future<Item = Out> {...}
/// # };
/// ```
pub mod mock {
    pub struct Raiser<'mock> {
        pub doBland: r#impl::raiser::doBland<'mock>,
        pub doRaise: r#impl::raiser::doRaise<'mock>,
        pub get200: r#impl::raiser::get200<'mock>,
        pub get500: r#impl::raiser::get500<'mock>,
        _marker: ::std::marker::PhantomData<&'mock ()>,
    }

    impl dyn super::client::Raiser {
        pub fn mock<'mock>() -> Raiser<'mock> {
            Raiser {
                doBland: r#impl::raiser::doBland::unimplemented(),
                doRaise: r#impl::raiser::doRaise::unimplemented(),
                get200: r#impl::raiser::get200::unimplemented(),
                get500: r#impl::raiser::get500::unimplemented(),
                _marker: ::std::marker::PhantomData,
            }
        }
    }

    impl<'mock> super::client::Raiser for Raiser<'mock> {
        fn doBland(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoBlandError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.doBland.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
        fn doRaise(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::raiser::DoRaiseError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.doRaise.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
        fn get200(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get200Error>> + ::std::marker::Send + 'static>> {
            let mut closure = self.get200.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
        fn get500(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::raiser::Get500Error>> + ::std::marker::Send + 'static>> {
            let mut closure = self.get500.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
    }

    mod r#impl {
        pub mod raiser {

            pub struct doBland<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        (),
                        crate::errors::raiser::DoBlandError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> doBland<'mock> {
                pub fn unimplemented() -> Self {
                    doBland {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "Raiser",
                            "doBland",
                        ))),
                    }
                }

                pub fn ret(&self, value: ()) {
                    self.mock(move || value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> () + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<(), crate::errors::raiser::DoBlandError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::raiser::DoBlandError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct doRaise<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        (),
                        crate::errors::raiser::DoRaiseError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> doRaise<'mock> {
                pub fn unimplemented() -> Self {
                    doRaise {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "Raiser",
                            "doRaise",
                        ))),
                    }
                }

                pub fn ret(&self, value: ()) {
                    self.mock(move || value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> () + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<(), crate::errors::raiser::DoRaiseError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::raiser::DoRaiseError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct get200<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        ::std::string::String,
                        crate::errors::raiser::Get200Error,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> get200<'mock> {
                pub fn unimplemented() -> Self {
                    get200 {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "Raiser",
                            "get200",
                        ))),
                    }
                }

                pub fn ret(&self, value: ::std::string::String) {
                    self.mock(move || value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> ::std::string::String + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<::std::string::String, crate::errors::raiser::Get200Error> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::raiser::Get200Error>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct get500<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        ::std::string::String,
                        crate::errors::raiser::Get500Error,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> get500<'mock> {
                pub fn unimplemented() -> Self {
                    get500 {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "Raiser",
                            "get500",
                        ))),
                    }
                }

                pub fn ret(&self, value: ::std::string::String) {
                    self.mock(move || value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> ::std::string::String + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<::std::string::String, crate::errors::raiser::Get500Error> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::raiser::Get500Error>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }
        }
    }
}

/// Error return types.
pub mod errors {
    /// Errors for Raiser functions.
    pub mod raiser {

        pub trait AsFiery {
            fn as_fiery(&self) -> Option<&crate::types::Fiery>;
        }

        impl AsFiery for ::anyhow::Error {
            fn as_fiery(&self) -> Option<&crate::types::Fiery> {
                for cause in self.chain() {
                    if let Some(DoRaiseError::f(e)) = cause.downcast_ref::<DoRaiseError>() {
                        return Some(e);
                    }
                    if let Some(Get500Error::f(e)) = cause.downcast_ref::<Get500Error>() {
                        return Some(e);
                    }
                }
                None
            }
        }

        pub trait AsSerious {
            fn as_serious(&self) -> Option<&crate::types::Serious>;
        }

        impl AsSerious for ::anyhow::Error {
            fn as_serious(&self) -> Option<&crate::types::Serious> {
                for cause in self.chain() {
                    if let Some(DoRaiseError::s(e)) = cause.downcast_ref::<DoRaiseError>() {
                        return Some(e);
                    }
                    if let Some(Get500Error::s(e)) = cause.downcast_ref::<Get500Error>() {
                        return Some(e);
                    }
                }
                None
            }
        }

        pub trait AsBanal {
            fn as_banal(&self) -> Option<&crate::types::Banal>;
        }

        impl AsBanal for ::anyhow::Error {
            fn as_banal(&self) -> Option<&crate::types::Banal> {
                for cause in self.chain() {
                    if let Some(DoRaiseError::b(e)) = cause.downcast_ref::<DoRaiseError>() {
                        return Some(e);
                    }
                    if let Some(Get500Error::b(e)) = cause.downcast_ref::<Get500Error>() {
                        return Some(e);
                    }
                }
                None
            }
        }

        pub type DoBlandError = ::fbthrift::NonthrowingFunctionError;

        impl ::std::convert::From<crate::services::raiser::DoBlandExn> for
            ::std::result::Result<(), DoBlandError>
        {
            fn from(e: crate::services::raiser::DoBlandExn) -> Self {
                match e {
                    crate::services::raiser::DoBlandExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::raiser::DoBlandExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(DoBlandError::ApplicationException(aexn)),
                }
            }
        }

        /// Errors for doRaise (client side).
        #[derive(Debug, ::thiserror::Error)]
        pub enum DoRaiseError {
            #[error("Raiser::doRaise failed with {0:?}")]
            b(crate::types::Banal),
            #[error("Raiser::doRaise failed with {0:?}")]
            f(crate::types::Fiery),
            #[error("Raiser::doRaise failed with {0:?}")]
            s(crate::types::Serious),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::Banal> for DoRaiseError {
            fn from(e: crate::types::Banal) -> Self {
                DoRaiseError::b(e)
            }
        }

        impl AsBanal for DoRaiseError {
            fn as_banal(&self) -> Option<&crate::types::Banal> {
                match self {
                    DoRaiseError::b(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<crate::types::Fiery> for DoRaiseError {
            fn from(e: crate::types::Fiery) -> Self {
                DoRaiseError::f(e)
            }
        }

        impl AsFiery for DoRaiseError {
            fn as_fiery(&self) -> Option<&crate::types::Fiery> {
                match self {
                    DoRaiseError::f(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<crate::types::Serious> for DoRaiseError {
            fn from(e: crate::types::Serious) -> Self {
                DoRaiseError::s(e)
            }
        }

        impl AsSerious for DoRaiseError {
            fn as_serious(&self) -> Option<&crate::types::Serious> {
                match self {
                    DoRaiseError::s(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<::anyhow::Error> for DoRaiseError {
            fn from(err: ::anyhow::Error) -> Self {
                DoRaiseError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for DoRaiseError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                DoRaiseError::ApplicationException(ae)
            }
        }
        impl ::std::convert::From<crate::services::raiser::DoRaiseExn> for
            ::std::result::Result<(), DoRaiseError>
        {
            fn from(e: crate::services::raiser::DoRaiseExn) -> Self {
                match e {
                    crate::services::raiser::DoRaiseExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::raiser::DoRaiseExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(DoRaiseError::ApplicationException(aexn)),
                    crate::services::raiser::DoRaiseExn::b(exn) =>
                        ::std::result::Result::Err(DoRaiseError::b(exn)),
                    crate::services::raiser::DoRaiseExn::f(exn) =>
                        ::std::result::Result::Err(DoRaiseError::f(exn)),
                    crate::services::raiser::DoRaiseExn::s(exn) =>
                        ::std::result::Result::Err(DoRaiseError::s(exn)),
                }
            }
        }

        pub type Get200Error = ::fbthrift::NonthrowingFunctionError;

        impl ::std::convert::From<crate::services::raiser::Get200Exn> for
            ::std::result::Result<::std::string::String, Get200Error>
        {
            fn from(e: crate::services::raiser::Get200Exn) -> Self {
                match e {
                    crate::services::raiser::Get200Exn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::raiser::Get200Exn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(Get200Error::ApplicationException(aexn)),
                }
            }
        }

        /// Errors for get500 (client side).
        #[derive(Debug, ::thiserror::Error)]
        pub enum Get500Error {
            #[error("Raiser::get500 failed with {0:?}")]
            f(crate::types::Fiery),
            #[error("Raiser::get500 failed with {0:?}")]
            b(crate::types::Banal),
            #[error("Raiser::get500 failed with {0:?}")]
            s(crate::types::Serious),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::Fiery> for Get500Error {
            fn from(e: crate::types::Fiery) -> Self {
                Get500Error::f(e)
            }
        }

        impl AsFiery for Get500Error {
            fn as_fiery(&self) -> Option<&crate::types::Fiery> {
                match self {
                    Get500Error::f(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<crate::types::Banal> for Get500Error {
            fn from(e: crate::types::Banal) -> Self {
                Get500Error::b(e)
            }
        }

        impl AsBanal for Get500Error {
            fn as_banal(&self) -> Option<&crate::types::Banal> {
                match self {
                    Get500Error::b(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<crate::types::Serious> for Get500Error {
            fn from(e: crate::types::Serious) -> Self {
                Get500Error::s(e)
            }
        }

        impl AsSerious for Get500Error {
            fn as_serious(&self) -> Option<&crate::types::Serious> {
                match self {
                    Get500Error::s(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<::anyhow::Error> for Get500Error {
            fn from(err: ::anyhow::Error) -> Self {
                Get500Error::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for Get500Error {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                Get500Error::ApplicationException(ae)
            }
        }
        impl ::std::convert::From<crate::services::raiser::Get500Exn> for
            ::std::result::Result<::std::string::String, Get500Error>
        {
            fn from(e: crate::services::raiser::Get500Exn) -> Self {
                match e {
                    crate::services::raiser::Get500Exn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::raiser::Get500Exn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(Get500Error::ApplicationException(aexn)),
                    crate::services::raiser::Get500Exn::f(exn) =>
                        ::std::result::Result::Err(Get500Error::f(exn)),
                    crate::services::raiser::Get500Exn::b(exn) =>
                        ::std::result::Result::Err(Get500Error::b(exn)),
                    crate::services::raiser::Get500Exn::s(exn) =>
                        ::std::result::Result::Err(Get500Error::s(exn)),
                }
            }
        }

    }

}
