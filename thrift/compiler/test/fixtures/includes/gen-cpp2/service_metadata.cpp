/**
 * Autogenerated by Thrift for src/service.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/includes/gen-cpp2/service_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);



void ServiceMetadata<::cpp2::MyServiceSvIf>::gen_query(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "query";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField service_MyService_query_s_1;
  service_MyService_query_s_1.id_ref() = 1;
  service_MyService_query_s_1.name_ref() = "s";
  service_MyService_query_s_1.is_optional_ref() = false;
  auto service_MyService_query_s_1_type = std::make_unique<Struct< ::cpp2::MyStruct>>("module.MyStruct");
  service_MyService_query_s_1_type->writeAndGenType(*service_MyService_query_s_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(service_MyService_query_s_1));
  ::apache::thrift::metadata::ThriftField service_MyService_query_i_2;
  service_MyService_query_i_2.id_ref() = 2;
  service_MyService_query_i_2.name_ref() = "i";
  service_MyService_query_i_2.is_optional_ref() = false;
  auto service_MyService_query_i_2_type = std::make_unique<Struct< ::cpp2::Included>>("includes.Included");
  service_MyService_query_i_2_type->writeAndGenType(*service_MyService_query_i_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(service_MyService_query_i_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::cpp2::MyServiceSvIf>::gen_has_arg_docs(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "has_arg_docs";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField service_MyService_has_arg_docs_s_1;
  service_MyService_has_arg_docs_s_1.id_ref() = 1;
  service_MyService_has_arg_docs_s_1.name_ref() = "s";
  service_MyService_has_arg_docs_s_1.is_optional_ref() = false;
  auto service_MyService_has_arg_docs_s_1_type = std::make_unique<Struct< ::cpp2::MyStruct>>("module.MyStruct");
  service_MyService_has_arg_docs_s_1_type->writeAndGenType(*service_MyService_has_arg_docs_s_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(service_MyService_has_arg_docs_s_1));
  ::apache::thrift::metadata::ThriftField service_MyService_has_arg_docs_i_2;
  service_MyService_has_arg_docs_i_2.id_ref() = 2;
  service_MyService_has_arg_docs_i_2.name_ref() = "i";
  service_MyService_has_arg_docs_i_2.is_optional_ref() = false;
  auto service_MyService_has_arg_docs_i_2_type = std::make_unique<Struct< ::cpp2::Included>>("includes.Included");
  service_MyService_has_arg_docs_i_2_type->writeAndGenType(*service_MyService_has_arg_docs_i_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(service_MyService_has_arg_docs_i_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::cpp2::MyServiceSvIf>::gen(::apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  const ::apache::thrift::metadata::ThriftServiceContextRef* self = genRecurse(*response.metadata_ref(), *response.services_ref());
  DCHECK(self != nullptr);
  // TODO(praihan): Remove ThriftServiceContext from response. But in the meantime, we need to fill the field with the result of looking up in ThriftMetadata.
  ::apache::thrift::metadata::ThriftServiceContext context;
  context.module_ref() = *self->module_ref();
  context.service_info_ref() = response.metadata_ref()->services_ref()->at(*self->service_name_ref());
  response.context_ref() = std::move(context);
}

const ThriftServiceContextRef* ServiceMetadata<::cpp2::MyServiceSvIf>::genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService service_MyService;
  service_MyService.name_ref() = "service.MyService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::cpp2::MyServiceSvIf>::gen_query,
    ServiceMetadata<::cpp2::MyServiceSvIf>::gen_has_arg_docs,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, service_MyService);
  }
  // We need to keep the index around because a reference or iterator could be invalidated.
  auto selfIndex = services.size();
  services.emplace_back();
  ThriftServiceContextRef& context = services[selfIndex];
  metadata.services_ref()->emplace("service.MyService", std::move(service_MyService));
  context.service_name_ref() = "service.MyService";
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "service";
  context.module_ref() = std::move(module);
  return &context;
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
