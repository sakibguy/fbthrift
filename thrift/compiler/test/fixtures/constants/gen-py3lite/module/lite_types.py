#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#
import enum

import thrift.py3lite.types as _fbthrift_py3lite_types
import thrift.py3lite.exceptions as _fbthrift_py3lite_exceptions


class EmptyEnum(enum.Enum):
    pass


class City(enum.Enum):
    NYC = 0
    MPK = 1
    SEA = 2
    LON = 3


class Company(enum.Enum):
    FACEBOOK = 0
    WHATSAPP = 1
    OCULUS = 2
    INSTAGRAM = 3


class Internship(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            False,  # isUnqualified
            "weeks",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "title",  # name
            _fbthrift_py3lite_types.typeinfo_string,  # typeinfo
            None,  # default value
        ),
        (
            3,  # id
            False,  # isUnqualified
            "employer",  # name
            lambda: _fbthrift_py3lite_types.EnumTypeInfo(Company),  # typeinfo
            None,  # default value
        ),
        (
            4,  # id
            False,  # isUnqualified
            "compensation",  # name
            _fbthrift_py3lite_types.typeinfo_double,  # typeinfo
            None,  # default value
        ),
        (
            5,  # id
            False,  # isUnqualified
            "school",  # name
            _fbthrift_py3lite_types.typeinfo_string,  # typeinfo
            None,  # default value
        ),
    )


class Range(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            False,  # isUnqualified
            "min",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            False,  # isUnqualified
            "max",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
    )


class struct1(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "a",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            1234567,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "b",  # name
            _fbthrift_py3lite_types.typeinfo_string,  # typeinfo
            "<uninitialized>",  # default value
        ),
    )


class struct2(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "a",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "b",  # name
            _fbthrift_py3lite_types.typeinfo_string,  # typeinfo
            None,  # default value
        ),
        (
            3,  # id
            True,  # isUnqualified
            "c",  # name
            lambda: _fbthrift_py3lite_types.StructTypeInfo(struct1),  # typeinfo
            None,  # default value
        ),
        (
            4,  # id
            True,  # isUnqualified
            "d",  # name
            lambda: _fbthrift_py3lite_types.ListTypeInfo(_fbthrift_py3lite_types.typeinfo_i32),  # typeinfo
            None,  # default value
        ),
    )


class struct3(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "a",  # name
            _fbthrift_py3lite_types.typeinfo_string,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "b",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            3,  # id
            True,  # isUnqualified
            "c",  # name
            lambda: _fbthrift_py3lite_types.StructTypeInfo(struct2),  # typeinfo
            None,  # default value
        ),
    )


class struct4(metaclass=_fbthrift_py3lite_types.StructMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "a",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            False,  # isUnqualified
            "b",  # name
            _fbthrift_py3lite_types.typeinfo_double,  # typeinfo
            None,  # default value
        ),
        (
            3,  # id
            False,  # isUnqualified
            "c",  # name
            _fbthrift_py3lite_types.typeinfo_byte,  # typeinfo
            None,  # default value
        ),
    )


class union1(metaclass=_fbthrift_py3lite_types.UnionMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "i",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "d",  # name
            _fbthrift_py3lite_types.typeinfo_double,  # typeinfo
            None,  # default value
        ),
    )


class union2(metaclass=_fbthrift_py3lite_types.UnionMeta):
    _fbthrift_SPEC = (
        (
            1,  # id
            True,  # isUnqualified
            "i",  # name
            _fbthrift_py3lite_types.typeinfo_i32,  # typeinfo
            None,  # default value
        ),
        (
            2,  # id
            True,  # isUnqualified
            "d",  # name
            _fbthrift_py3lite_types.typeinfo_double,  # typeinfo
            None,  # default value
        ),
        (
            3,  # id
            True,  # isUnqualified
            "s",  # name
            lambda: _fbthrift_py3lite_types.StructTypeInfo(struct1),  # typeinfo
            None,  # default value
        ),
        (
            4,  # id
            True,  # isUnqualified
            "u",  # name
            lambda: _fbthrift_py3lite_types.StructTypeInfo(union1),  # typeinfo
            None,  # default value
        ),
    )


_fbthrift_py3lite_types.fill_specs(
    Internship,
    Range,
    struct1,
    struct2,
    struct3,
    struct4,
    union1,
    union2,
)


myInt = 1337

name = "Mark Zuckerberg"

multi_line_string = """This
is a
multi line string.
"""

states = ({"San Diego": 3211000, "Sacramento": 479600, "SF": 837400}, {"New York": 8406000, "Albany": 98400}, )

x = float(1)

y = 1000000.0

z = float(1000000000)

zeroDoubleValue = float(0)

longDoubleValue = float(2.59961000990301e-05)

my_company = Company.FACEBOOK

foo = "foo"

bar = 42

mymap = {"keys": "values"}

instagram = Internship(weeks=12, title="Software Engineer", employer=Company.INSTAGRAM, compensation=float(1200), school="Monters University")

partial_const = Internship(weeks=8, title="Some Job")

kRanges = (Range(min=1, max=2), Range(min=5, max=6), )

internList = (Internship(weeks=12, title="Software Engineer", employer=Company.INSTAGRAM, compensation=float(1200), school="Monters University"), Internship(weeks=10, title="Sales Intern", employer=Company.FACEBOOK, compensation=float(1000)), )

pod_0 = struct1()

pod_s_0 = struct1()

pod_1 = struct1(a=10, b="foo")

pod_s_1 = struct1(a=10, b="foo")

pod_2 = struct2(a=98, b="gaz", c=struct1(a=12, b="bar"), d=(11, 22, 33, ))

pod_trailing_commas = struct2(a=98, b="gaz", c=struct1(a=12, b="bar"), d=(11, 22, 33, ))

pod_s_2 = struct2(a=98, b="gaz", c=struct1(a=12, b="bar"), d=(11, 22, 33, ))

pod_3 = struct3(a="abc", b=456, c=struct2(a=888, c=struct1(b="gaz"), d=(1, 2, 3, )))

pod_s_3 = struct3(a="abc", b=456, c=struct2(a=888, c=struct1(b="gaz"), d=(1, 2, 3, )))

pod_4 = struct4(a=1234, b=float(0.333), c=25)

u_1_1 = union1(i=97)

u_1_2 = union1(d=float(5.6))

u_1_3 = union1()

u_2_1 = union2(i=51)

u_2_2 = union2(d=float(6.7))

u_2_3 = union2(s=struct1(a=8, b="abacabb"))

u_2_4 = union2(u=union1(i=43))

u_2_5 = union2(u=union1(d=float(9.8)))

u_2_6 = union2(u=union1())

apostrophe = "'"

tripleApostrophe = "'''"

quotationMark = '"'

backslash = "\\"

escaped_a = "\x61"

char2ascii = {"'": 39, '"': 34, "\\": 92, "\x61": 97}

escaped_strings = ("\x61", "\xab", "\x6a", "\xa6", "\x61yyy", "\xabyyy", "\x6ayyy", "\xa6yyy", "zzz\x61", "zzz\xab", "zzz\x6a", "zzz\xa6", "zzz\x61yyy", "zzz\xabyyy", "zzz\x6ayyy", "zzz\xa6yyy", )

false_c = False

true_c = True

zero_byte = 0

zero16 = 0

zero32 = 0

zero64 = 0

zero_dot_zero = float(0)

empty_string = 

empty_int_list = ()

empty_string_list = ()

empty_int_set = ()

empty_string_set = ()

empty_int_int_map = {}

empty_int_string_map = {}

empty_string_int_map = {}

empty_string_string_map = {}

MyCompany = Company
MyStringIdentifier = str
MyIntIdentifier = int
MyMapIdentifier = dict
