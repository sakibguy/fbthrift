#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

import typing as _typing

import enum

import fbcode.thrift.py3lite.types as _fbthrift_py3lite_types
import fbcode.thrift.py3lite.exceptions as _fbthrift_py3lite_exceptions


class AnEnum(enum.Enum):
    NOTSET: AnEnum = ...
    ONE: AnEnum = ...
    TWO: AnEnum = ...
    THREE: AnEnum = ...
    FOUR: AnEnum = ...


class Flags(enum.Flag):
    flag_A: Flags = ...
    flag_B: Flags = ...
    flag_C: Flags = ...
    flag_D: Flags = ...


class SimpleException(_fbthrift_py3lite_exceptions.GeneratedError):
    err_code: _typing.Final[int] = ...
    def __init__(
        self, *,
        err_code: _typing.Optional[int]=...
    ) -> None: ...

    def __iter__(self) -> typing.Iterator[typing.Tuple[str, _typing.Union[None, int]]]: ...


class OptionalRefStruct(_fbthrift_py3lite_types.Struct):
    optional_blob: _typing.Final[_typing.Optional[bytes]] = ...
    def __init__(
        self, *,
        optional_blob: _typing.Optional[bytes]=...
    ) -> None: ...

    def __call__(
        self, *,
        optional_blob: _typing.Optional[bytes]=...
    ) -> OptionalRefStruct: ...
    def __iter__(self) -> typing.Iterator[typing.Tuple[str, _typing.Union[None, bytes]]]: ...


class SimpleStruct(_fbthrift_py3lite_types.Struct):
    is_on: _typing.Final[bool] = ...
    tiny_int: _typing.Final[int] = ...
    small_int: _typing.Final[int] = ...
    nice_sized_int: _typing.Final[int] = ...
    big_int: _typing.Final[int] = ...
    real: _typing.Final[float] = ...
    smaller_real: _typing.Final[float] = ...
    hidden_field: _typing.Final[int] = ...
    def __init__(
        self, *,
        is_on: _typing.Optional[bool]=...,
        tiny_int: _typing.Optional[int]=...,
        small_int: _typing.Optional[int]=...,
        nice_sized_int: _typing.Optional[int]=...,
        big_int: _typing.Optional[int]=...,
        real: _typing.Optional[float]=...,
        smaller_real: _typing.Optional[float]=...,
        hidden_field: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        is_on: _typing.Optional[bool]=...,
        tiny_int: _typing.Optional[int]=...,
        small_int: _typing.Optional[int]=...,
        nice_sized_int: _typing.Optional[int]=...,
        big_int: _typing.Optional[int]=...,
        real: _typing.Optional[float]=...,
        smaller_real: _typing.Optional[float]=...,
        hidden_field: _typing.Optional[int]=...
    ) -> SimpleStruct: ...
    def __iter__(self) -> typing.Iterator[typing.Tuple[str, _typing.Union[None, bool, int, int, int, int, float, float, int]]]: ...


class ComplexStruct(_fbthrift_py3lite_types.Struct):
    structOne: _typing.Final[SimpleStruct] = ...
    structTwo: _typing.Final[SimpleStruct] = ...
    an_integer: _typing.Final[int] = ...
    name: _typing.Final[str] = ...
    an_enum: _typing.Final[AnEnum] = ...
    some_bytes: _typing.Final[bytes] = ...
    sender: _typing.Final[str] = ...
    cdef_: _typing.Final[str] = ...
    bytes_with_cpp_type: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        structOne: _typing.Optional[SimpleStruct]=...,
        structTwo: _typing.Optional[SimpleStruct]=...,
        an_integer: _typing.Optional[int]=...,
        name: _typing.Optional[str]=...,
        an_enum: _typing.Optional[AnEnum]=...,
        some_bytes: _typing.Optional[bytes]=...,
        sender: _typing.Optional[str]=...,
        cdef_: _typing.Optional[str]=...,
        bytes_with_cpp_type: _typing.Optional[bytes]=...
    ) -> None: ...

    def __call__(
        self, *,
        structOne: _typing.Optional[SimpleStruct]=...,
        structTwo: _typing.Optional[SimpleStruct]=...,
        an_integer: _typing.Optional[int]=...,
        name: _typing.Optional[str]=...,
        an_enum: _typing.Optional[AnEnum]=...,
        some_bytes: _typing.Optional[bytes]=...,
        sender: _typing.Optional[str]=...,
        cdef_: _typing.Optional[str]=...,
        bytes_with_cpp_type: _typing.Optional[bytes]=...
    ) -> ComplexStruct: ...
    def __iter__(self) -> typing.Iterator[typing.Tuple[str, _typing.Union[None, SimpleStruct, SimpleStruct, int, str, AnEnum, bytes, str, str, bytes]]]: ...


class BinaryUnion(_fbthrift_py3lite_types.Union):
    iobuf_val: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        iobuf_val: _typing.Optional[bytes]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: BinaryUnion.Type = ...
        iobuf_val: BinaryUnion.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, bytes]) -> BinaryUnion: ...
    value: _typing.Final[_typing.Union[None, bytes]]
    type: Type
    def get_type(self) -> Type:...


class BinaryUnionStruct(_fbthrift_py3lite_types.Struct):
    u: _typing.Final[BinaryUnion] = ...
    def __init__(
        self, *,
        u: _typing.Optional[BinaryUnion]=...
    ) -> None: ...

    def __call__(
        self, *,
        u: _typing.Optional[BinaryUnion]=...
    ) -> BinaryUnionStruct: ...
    def __iter__(self) -> typing.Iterator[typing.Tuple[str, _typing.Union[None, BinaryUnion]]]: ...


A_BOOL: bool = ...

A_BYTE: int = ...

THE_ANSWER: int = ...

A_NUMBER: int = ...

A_BIG_NUMBER: int = ...

A_REAL_NUMBER: float = ...

A_FAKE_NUMBER: float = ...

A_WORD: str = ...

SOME_BYTES: bytes = ...

A_STRUCT: SimpleStruct = ...

WORD_LIST: _typing.Sequence[str] = ...

SOME_MAP: _typing.Sequence[_typing.Mapping[int, float]] = ...

DIGITS: _typing.AbstractSet[int] = ...

A_CONST_MAP: _typing.Mapping[str, SimpleStruct] = ...

IOBufPtr = bytes
IOBuf = bytes
foo_bar = bytes
